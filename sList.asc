// Used for making string based Lists ( sList - String List, stored as a string. ) 
String sListMakeEncodedKeyStart(String listName){
  String a = "<"; a = a.Append(listName); return a.Append(">"); }
String sListMakeEndOfEncodedKey(String listName){
  String a = "</"; a = a.Append(listName); return a.Append(">"); }
String sListMakeEncodedKey( String listName, String item){
  String encodedKey = sListMakeEncodedKeyStart(listName);
  encodedKey = encodedKey.Append( item );
  return encodedKey.Append( sListMakeEndOfEncodedKey(listName)); }

static int sList::findSubStringNumber(
  String getString,  String subString,  int subStrNumber,
    bool indexAfterString){
    
    subStrNumber = subStrNumber + 1;
    int searchIndex = 0;
    
    int extraToCutOff = subString.Length - 1;
    int lastSearchResults = 0;
    String cuttingString = getString.Append("");
    while( lastSearchResults !=-1 && subStrNumber > 0 ){
      lastSearchResults = cuttingString.IndexOf(subString) ;
      searchIndex +=  lastSearchResults + extraToCutOff;
      if( lastSearchResults == -1){
         searchIndex = getString.Length;}
      cuttingString = getString.Substring( searchIndex, getString.Length );
      subStrNumber -=1;
    }
    if(searchIndex != getString.Length){ 
        searchIndex -= extraToCutOff;  }
    if( subStrNumber > 0 ){ return searchIndex;}
    if( indexAfterString == false || getString.Length == searchIndex){
      return searchIndex;
    }else{ return searchIndex + subString.Length; }
}
static int sList::GetLength(  String list,  String listName){
    String subStringSearchFor = sListMakeEndOfEncodedKey(listName);
    char subStringFirstChar = subStringSearchFor.Chars[0];
    int searchIndex = 0;
    int subStrNumber = 0;
    
    while( searchIndex < list.Length){
      if(subStringFirstChar == list.Chars[searchIndex]){
        if(list.Substring(searchIndex, subStringSearchFor.Length) == 
              subStringSearchFor){
          subStrNumber += 1;  } }
       searchIndex +=1;
       }
    if( subStrNumber > 0 ){ return subStrNumber;}
    return 0;
}

static String sList::AddItem(String list,  String listName, 
  String item1, String item2, String item3, String item4, String item5){
    list = list.Append( sListMakeEncodedKey(listName, item1));
    if(item2 == null){ return list;}
     list = list.Append( sListMakeEncodedKey(listName, item2));
    if(item3 == null){ return list;}
     list = list.Append( sListMakeEncodedKey(listName, item3));
    if(item4 == null){ return list;}
     list = list.Append( sListMakeEncodedKey(listName, item4));
    if(item5 == null){ return list;}
     list = list.Append( sListMakeEncodedKey(listName, item5));
    return list;
    
}
static String sList::InsertItem(String list,  String listName, String item,  int index){
 int insertIndex = 
  sList.findSubStringNumber(list, sListMakeEncodedKeyStart( listName) ,index  , false);
 String returnList = list.Substring(0, insertIndex);
 returnList = returnList.Append( sListMakeEncodedKey(listName, item));
 return  returnList.Append( list.Substring(insertIndex, list.Length)) ;
}
static String sList::JoinLists(String list, String listName, 
    String listToJoin, String listToJoinName,  int index){
 int insertIndex = 
  sList.findSubStringNumber(list, sListMakeEncodedKeyStart( listName) ,index  , false);
 listToJoin = listToJoin.Replace(listToJoinName, listName);
 String returnList = list.Substring(0, insertIndex);
 returnList = returnList.Append( listToJoin);
 return  returnList.Append( list.Substring(insertIndex, list.Length)) ;
}
static String sList::RemoveItems(
      String list,  String listName, int index,  int numberOfItems){
 int cutStartIndex = 
  sList.findSubStringNumber(list, sListMakeEncodedKeyStart( listName) ,index  , false);
 int cutEndIndex = 
  sList.findSubStringNumber(list, 
    sListMakeEncodedKeyStart( listName) ,index + numberOfItems , false);
 
 String returnList = list.Substring(0, cutStartIndex);
 return  returnList.Append( list.Substring(cutEndIndex, list.Length)) ;
}

static String sList::GetItem(String list,  String listName,  int index){
   int itemLocationStart = 
    sList.findSubStringNumber(list, sListMakeEncodedKeyStart( listName) ,index  , true);
   int itemLength = 
    sList.findSubStringNumber(list, sListMakeEndOfEncodedKey( listName) ,index  , false) 
      - itemLocationStart;
  if(itemLocationStart < 0 || itemLength < 0){ return "";}
  return list.Substring(itemLocationStart, itemLength);
}
static String sList::GetSubList(String list,  String listName,  int indexStart, int length){
   int itemsLocationStart = 
    sList.findSubStringNumber(list, sListMakeEncodedKeyStart( listName) ,indexStart  , false);
   int itemsCharacterLength = 
    sList.findSubStringNumber(list, 
      sListMakeEncodedKeyStart( listName) ,indexStart + length  , false) 
      - itemsLocationStart;
  if(itemsLocationStart < 0 || itemsCharacterLength < 0){ return "";}
  return list.Substring(itemsLocationStart, itemsCharacterLength);
}

static String sList::Shuffle(String list, String listName){
  int listItemActive = 0;
  int listLength = sList.GetLength( list,  listName );
  
  String movingItem;
  String returnList = "";
  while( listItemActive < listLength ){
    movingItem = sList.GetItem( list, listName, listItemActive );
    returnList = sList.InsertItem( returnList, listName, 
                    movingItem,  Random(listItemActive));
    listItemActive += 1;
  }
  return returnList;
}
/*
String[] ShuffleStringList( String getStringList[], int getLength ){ 
    int l =  getLength - 1;  
    String item = ""; 
    int rand; 
    while( l > 0){ 
      rand = Random( l ); 
      item = getStringList[ l ]; 
      getStringList[ l ] = getStringList[ rand ]; 
      getStringList[ rand ] = item; 
       l -= 1;  } 
   return getStringList; 
}  
static String sList::Shuffle(String list, String listName){
  int listItemActive = 0;
  int listLength = sList.GetLength( list,  listName );
  int pastableSpacesInList = listLength;
  
  String movingItem;
  String workingList[] = new String[listLength]; 
  while( listItemActive < listLength ){
    workingList[listItemActive] = sList.GetItem( list, listName, listItemActive );
    listItemActive +=1;}  
  workingList = ShuffleStringList( workingList, listLength );
  
  listItemActive =0;
  String returnList = "";
  while( listItemActive < listLength ){
    returnList = returnList.Append(
      sListMakeEncodedKey( listName, workingList[listItemActive]));
    listItemActive +=1;}
   
  return returnList;
}
*/
static String sList::Reverse(String list, String listName){
  int listItemActive = sList.GetLength(list,  listName )- 1;
  String returnList = "";
  int returnListLength = 0;
  
  while( listItemActive >= 0 ){
    returnList = sList.AddItem(returnList, listName, 
      sList.GetItem( list, listName, listItemActive));
    
    returnListLength += 1;
    listItemActive -= 1;
  }
  return returnList;
}

static String sList::MakeWithANewItemForEveryItemAAndItemBTextCombination(
      String listA, String listAName_ReturnsWithThisName, String listB, String listBName){
  String listAName = listAName_ReturnsWithThisName;
  String returnList = "";
  int activeIndex = 0;
  int B =0; int A = 0;
  String activeListBItem = "";
  int listALength = sList.GetLength(listA, listAName);
  int listBLength = sList.GetLength(listB, listBName);
  
  
  String workingBlocks[] = new String[listBLength]; 
  while( B< listBLength){
    A=0;
    activeListBItem = sList.GetItem(listB, listBName, B);
     workingBlocks[B] = "";
    while( A< listALength){ 
        workingBlocks[B] = 
          sList.AddItem( workingBlocks[B], listAName, 
                         activeListBItem.Append( sList.GetItem(listA, listAName, A)));
        A+=1;}
    B+=1;
  }
  B = 0;
  while( B< listBLength){   
    returnList = returnList.Append( workingBlocks[B]); B+=1;  }
  return returnList;
}
static String sList::MakeFromSplitString(String SplitBy,  String returnSListName, String getString ){
   String returnSList = "";
   String workingItem = "";
   while(getString.IndexOf(SplitBy) != -1){
     workingItem = getString.Substring( 0,  getString.IndexOf(SplitBy)); 
     returnSList = sList.AddItem(returnSList, returnSListName, workingItem );
     getString = getString.Substring( getString.IndexOf(SplitBy) + SplitBy.Length ,  getString.Length );
   }
   returnSList = sList.AddItem(returnSList, returnSListName, getString );
   return returnSList;
}

/////////////////////////////////////
/////////////////////////
///////////////////////////////////////////////
int sListGetLength(  this String*,  String listName){ return sList.GetLength(this, listName); }
String sListAddItem(this String*,  String listName, 
    String item1, String item2, String item3, String item4, String item5){
  return sList.AddItem(this,  listName, item1, item2, item3, item4, item5); }
String sListInsertItem(this String*,  String listName, String item,  int index){
 return  sList.InsertItem(this,  listName, item,  index); }
String sListJoinLists(this String*, String listName, 
    String listToJoin, String listToJoinName,  int index){
      return  sList.JoinLists(this, listName, listToJoin, listToJoinName, index) ;  }
String sListRemoveItems(  this String*,  String listName, int index,  int numberOfItems){
 return  sList.RemoveItems(this, listName, index, numberOfItems);}
String sListGetItem(this String*,  String listName,  int index){
  return sList.GetItem(this, listName, index);}
String sListGetSubList(this String*,  String listName,  int indexStart, int length){
  return sList.GetSubList(this, listName, indexStart, length); }
String sListShuffle(this String*, String listName){ return sList.Shuffle(this, listName); }
String sListReverse(this String*, String listName){ return sList.Reverse(this, listName); }
String sListMakeFromSplitString(this String*,  String SplitBy, String returnSListName ){
    return sList.MakeFromSplitString( SplitBy, returnSListName, this );}
